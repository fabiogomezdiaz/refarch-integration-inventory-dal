package inventory.ws;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.List;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebService;

import inventory.model.Inventory;
import inventory.model.ItemEntity;
import inventory.service.InventoryProvider;
import inventory.service.SupplierProvider;
import inventory.ws.dto.Item;
import inventory.ws.dto.Supplier;
/**
 * SOAP Service for the inventory, suppliers, and items. 
 * The single class to support the SOAP operation is done on purpose to represent a silo app.
 *  
 * @author jerome boyer
 *
 */
@WebService
public class DALService {
    private static String version = "v0.0.3"; 
    private SupplierProvider supplierProvider;
    private InventoryProvider inventoryProvider;
    
    public DALService(){
	    	supplierProvider = new SupplierProvider();
	    	inventoryProvider = new InventoryProvider();
    }
       
	@WebMethod
	public String sayHello() {
	    return "Inventory DAL welcome "+ version ;
	}
	
	// -------------------- ITEM ------------------------------------
	
	@WebMethod(operationName = "newItem")
	public Item newItem(Item item) throws DALException{
		ItemEntity ie = item.toItemEntity();
		ItemEntity ieout = inventoryProvider.newItem(ie);
		return new Item(ieout,0);
	}
	
	@WebMethod(operationName = "itemById")
	public Item getItemById(@WebParam(name="id")long id) throws DALException{
		return new Item(inventoryProvider.getItemById(id),1);
	}
	
	@WebMethod(operationName = "itemByName")
	public Item getItemByName(@WebParam(name="name")String name) throws DALException{
		return new Item(inventoryProvider.getItemByName(name),1);
	}
	
	@WebMethod(operationName = "updateItem")
	public Item updateItem(Item inItem) throws DALException{
		return new Item(inventoryProvider.updateItem(inItem.toItemEntity()),1);
	}
	
	@WebMethod(operationName = "getItems")
	public Collection<Item> getItems() throws DALException{
		return processList(inventoryProvider.getItems());
	}
	
	@WebMethod(operationName = "deleteItems")
	public String deleteItem(long id) throws DALException{
		return inventoryProvider.deleteItem(new Long(id));
	}
	
	private Collection<Item>  processList(Collection<ItemEntity> l ){
		List<Item> li=new ArrayList<Item>();
		for (ItemEntity ie : l){
			Item i = new Item(ie,0);
			li.add(i);
		}
		return li;
	}
	// ----------------------------------------------------------------
	// Inventory
	// ----------------------------------------------------------------
	/**
	 * Return the list of items in a given site
	 * @param siteName
	 * @return
	 * @throws DALException
	 */
	@WebMethod(operationName="getItemsPerSite")
	public Collection<Item> getItemsPerSite(String siteName) throws DALException{
		return processList(inventoryProvider.getItemsPerSite(siteName));
	}
	
	/**
	 * Return the stock value per item
	 * @param siteName
	 * @return
	 * @throws DALException
	 */
	@WebMethod(operationName="getInventoryPerSite")
	public Collection<Inventory> getInventoryBySite(String siteName) throws DALException{
		return inventoryProvider.getInventoryBySite(siteName);
	}
	
	@WebMethod(operationName="getInventoryPerSupplier")
	public Collection<Inventory> getInventoryBySupplier(Long supplierId) throws DALException{
		return inventoryProvider.getInventoryBySupplier(supplierId);
	}
	
	@WebMethod(operationName="getSuppliersOfItem")
	public Collection<Supplier> getSuppliersOfItem(Long itemId) throws DALException{
		Collection<Supplier> ls = new ArrayList<Supplier>();
		if (itemId != null) {
				Collection<Inventory> l = inventoryProvider.getSiteInventoryByItemId(itemId);
				if (l != null) {
					for (Inventory iv :l) {
						Supplier su = supplierProvider.getSupplierById(iv.getSupplierId());
						ls.add(su);
					}
					return ls;
				}
		}
		return ls;
	}
	
	/**
	 * Return the accumulated quantity for an item
	 * @param id
	 * @return
	 * @throws DALException
	 */
	@WebMethod(operationName="getItemStock")
	public int getItemStock(Long id) throws DALException {
		return inventoryProvider.getItemStock(id);
	}

	@WebMethod(operationName="addItemToSite")
	/**
	 * Post a new inventory entry
	 * @param item ID
	 * @param quantity
	 * @param site name
	 * @param supplierId
	 * @return an inventory with an id
	 * @throws DALException
	 */
	public Inventory newInventoryEntry(long itemId, int quantity, String siteName, long supplierId,double cost) throws DALException {
		return inventoryProvider.newInventoryEntry(itemId, quantity, siteName, supplierId, cost);
	}
	

	@WebMethod(operationName="sellItem")
	public Inventory sellItem(long it, int q, String site, long customerId,double amount)  throws DALException {
		return inventoryProvider.sellItem(it, q, site, customerId, amount);
	}
	
	public Inventory getInventoryById(long inventoryId) throws DALException {
		return inventoryProvider.getInventoryById(inventoryId);
	}
	
	
	public Inventory updateInventoryEntry(Inventory iv) throws DALException {
		iv.setUpdateDate(new Date());
		return inventoryProvider.updateInventoryEntry(iv);
	}
	
	@WebMethod(operationName="getInventoryForSiteAndItemId")
	public Inventory getInventoryForSiteAndItemId(long itemIdToKeep, String siteName)  throws DALException {
		return inventoryProvider.getInventoryForSiteAndItemId(itemIdToKeep, siteName);
	}
	
	@WebMethod(operationName="getInventoryCrossSite")
	public Collection<Inventory> getInventoryCrossSite()  throws DALException{
		return inventoryProvider.getInventoryCrossSite();
	}

	
	// ----------------------------------------------------------------
	// Supplier
	// ----------------------------------------------------------------
	@WebMethod(operationName="newSupplier")
	public Supplier newSupplier(Supplier s) throws DALException{
		return supplierProvider.newSupplier(s);
	}

	@WebMethod(operationName="supplierById")
	public Supplier getSupplierById(long supplierId)  throws DALException {
		return supplierProvider.getSupplierById(supplierId);
	}

	@WebMethod(operationName="supplierByName")
	public Supplier getSupplierByName(String name) throws DALException {
		return supplierProvider.getSupplierByName(name);
	}

	@WebMethod(operationName="suppliers")
	public Collection<Supplier> getSuppliers() throws DALException {		
		return supplierProvider.getSuppliers();
	}
	
	@WebMethod(operationName="updateSupplier")
	public Supplier updateSupplier(Supplier s) throws DALException{
		return supplierProvider.updateSupplier(s);
	}
	
	@WebMethod(operationName="deleteSupplier")
	public String deleteSupplier(long id) throws DALException {
		return supplierProvider.deleteSupplier(id);
	}
}
